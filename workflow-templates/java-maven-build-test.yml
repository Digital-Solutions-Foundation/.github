name: Build and Test workflow for Spring Boot microservices

on:
  workflow_call:
    inputs:
      # pass in environment through manual trigger, if not passed in, default to 'dev'
      env:
        required: true
        type: string
        default: 'dev'
      # working-directory is added to accommodate monorepo.  For multi repo, defaults to '.', current directory
      working-directory:
        required: false
        type: string
        default: '.'
      # pass in java version to allow different app requiring different java versions to reuse the same workflow, default to java 17
      java-version:
        required: false
        type: string
        default: '17'
      # allowing calling workflows to pass in maven parameter(s) such as '-Dmaven.test.skip' for certain apps, default to blank, not to skip test
      maven-params:
        required: false
        type: string
        default: ''
      # flag to indicate whether to install private lib from github packages
      install-private-lib:
        required: false
        type: boolean
        default: false
      # flag to indicate whether to run TruffleHog scan
      trufflehog-scan-flag:
        required: false
        type: boolean
        default: false
        
jobs:

  build:
    name: Build and Test
    runs-on: ubuntu-latest

    # accommodating monorepo, this sets the working directory at the job level, for multi repo, defaults to "."
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    # important to specify environment here, defaults to 'dev', so github ations knows where to retrieve the secrets
    environment: ${{ inputs.env || 'dev' }}

    # only run this job for auto trigger by PR merge, if manual trigger for other environments than dev,
    # no need to run this job as the image will be pulled and promoted to envs higher than dev
    # also dependabot PRs do not need to run this flow as GitHub prohibits dependabot PRs to access workflows
    # dealing with secrets due to security reason.
    if: (inputs.env == null || inputs.env == 'dev') && github.actor != 'dependabot[bot]'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Configure Azure credentials
        uses: Azure/login@v2.1.1

      - name: Setup jdk
        uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'adopt'
          cache: maven

      - name: Set project version as environment variable and build with maven
        env:
          INSTALL_PRIVATE_LIB: ${{ inputs.install-private-lib }}
          PAT: ${{ secrets.NPM_TOKEN }}
        run: |          
          if [[ "$INSTALL_PRIVATE_LIB" == true ]]; then
            echo "PROJECT_VERSION=$(mvn -s $GITHUB_WORKSPACE/settings.xml help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
            mvn -s $GITHUB_WORKSPACE/settings.xml clean install ${{ inputs.maven-params }} -B --file pom.xml            
          else
            echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
            mvn clean install ${{ inputs.maven-params }} -B --file pom.xml
          fi
          
      - name: Print debug info
        run: |
          echo environment is ${{ inputs.env }}
          echo working_directory is ${{ inputs.working-directory }}
          echo project version is ${{ env.PROJECT_VERSION }}
          echo java-version is ${{ inputs.java-version }}

      - name: Build, tag, and push image to ACR
        id: build-image
        env:
          AZURE_REGION: ${{ secrets.AZURE_REGION }}
          ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
          ACR_REPOSITORY: ${{ secrets.ACR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ env.PROJECT_VERSION }}
        run: |
          # Build a docker container and push it to ACR so that it can be deployed to ECS.
          docker build -t $ACR_REGISTRY/$ACR_REPOSITORY:$IMAGE_TAG .
          az acr login -n $ACR_REGISTRY | docker login -u AZURE --password-stdin $ACR_REGISTRY
          docker push $ACR_REGISTRY/$ACR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ACR_REGISTRY/$ACR_REPOSITORY:$IMAGE_TAG"
